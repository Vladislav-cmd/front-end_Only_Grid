/*Обнуление*/
*,
*:before,
*:after {
	padding: 0;
	margin: 0;
	border: 0;
	box-sizing: border-box;
}
html,
body {
	height: 100%;
	background-color: #333;
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
	color: #fff;
	font-size: 16px;
	line-height: 24px;
}
a {
	color: #794f45;
}
h1 {
	font-size: 40px;
	line-height: 1;
	margin: 0px 0px 50px 0px;
}
h2 {
	font-size: 30px;
	line-height: 1;
	margin: 0px 0px 20px 0px;
}
ul {
	list-style: none;
}
// --------------------------------------------------------------------
.wrapper { // у него три блока header main footer
	min-height: 100%; // или 100vh если там что-то не получится прижать
	display: grid;
	// выстраиваем сетку
	// первый ряд шапка (высота), main 1fr (чтобы занимал все оставшееся пространство прибивая футер), footer / размер колонки устанавливаем (т к одна, то 1fr)
	grid-template: minmax(100px, auto) 1fr minmax(70px, auto) / 1fr;
	// дадим название элементам сетки и присвоим их grid элементам
	grid-template-areas:
	"header"
	"main"
	"footer";
}
// ------------------------------------------------------------------------------------------------------------------------
.header {
	// присваиваем имя
	grid-area: header;
	padding: 15px;
	background-color: #794f45;
	display: grid;
	align-items: center;
	// объявим сетку
	// также попробуем здесь применить свойства ограничивающего контейнера
	// (1 ряд на всю высоту) / 1fr левая область до контейнера колонка для логотипа, и область для меню, область контейнера справа
	grid-template: 1fr / 1fr minmax(auto, 300px) minmax(auto, 1100px) 1fr;

	@media (max-width: 992px) {
		position: fixed; // для меню + бургер
		z-index: 50; // для меню + бургер
	}
}
.header__logo {
	width: 70px;
	height: 70px;
	border-radius: 50%;
	background-color: #fff;
	// все изначально начинается с 1 ячейки и будет сломано, поэтому задаем порядок их появления
	grid-column: 2 / 3; // пишем начальная ячейка и конечная
}
.header__menu {
	// все изначально начинается с 1 ячейки и будет сломано, поэтому задаем порядок их появления
	grid-column: 3 / 4; // пишем начальная ячейка и конечная
	@media (max-width: 992px) {
		display: grid;
		justify-items: end;
	}
}
.header__list {
	display: grid;
	// автоматическое заполнение по колонкам в ряд
	grid-auto-flow: column;
	justify-items: end;
	& li{
		margin: 0 0 0 30px;
	}
	// убираем меню для бургера
	@media (max-width: 992px) {
		// display: none;
		// для бургера область с меню
		position: fixed;
		// чтобы меню изначально было скрыто
		top: -100%;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: #18b5a4;
		padding: 70px 0 0 0;
		transition: all 0.3s ease 0s;
		// чтобы при горизонтальном положении меню все было видно
		overflow: auto; // добавляет возможность проскролить
		&.active {
			top: 0;
			display: block;
			margin: 100px 0 0 0;
			padding: 30px 0 0 0;
		}
		& li{
			margin: 0 0 15px 15px;
		}
		& a{
			font-size: 24px;
			line-height: 32px;
			// text-decoration: none;
		}
	}
}
.header__link {
	color: #fff;
	font-size: 18px;
}
.header__burger { // рисуем бургер
	@media (max-width: 992px) {
		position: relative;
		width: 30px; // ширина бургера
		display: grid;
		align-items: center;
		grid-template: repeat(3, 8px) / 1fr; // 3 элемента бургера before span after располагаются вертикально с интервалом в 8px
		cursor: pointer;

		&:before,&:after{
			content: '';
			background-color: #fff;
			position: absolute;
			width: 100%;
			height: 2px;
			left: 0;
			transition: all 0.3s ease 0s;
		}
		&:before {
			top: 0;
		}
		&:after {
			bottom: 0;
		}
		& span {
			position: absolute;
			background-color: #fff;
			left: 0;
			width: 100%;
			height: 2px;
			transition: all 0.3s ease 0s;
		}
		// появившийся класс после нажатия
		// делаем из бургера крестик (закрытие)
		&.active:before{
			transform: rotate(45deg);
			top: 12px;
		}
		&.active:after{
			transform: rotate(-45deg);
			bottom: 10px;
		}
		&.active span{
			transform: scale(0);
		}
	}
}
// блокирует прокрутку при включенном бургере
body.lock {
	@media (max-width: 992px) {
		overflow: hidden;
	}
}
// --------------------------------------------------------------------------------------------------------------------
.main {
	padding: 30px 15px;
	// mobile-first
	@media (min-width: 992px){ // применяет свойства только на ширинах больше 992px
		grid-area: main;
		display: grid;
		// также попробуем здесь применить свойства ограничивающего контейнера
		// (1 ряд на всю высоту) / 1fr левая область до контейнера, колонка для sidebar, и область для content, область контейнера справа
		grid-template: 1fr / 1fr minmax(auto, 300px) minmax(auto, 1100px) 1fr;
	}
}
.sidebar {
	background-color: #7a956b;
	padding: 100px 15px 30px 15px;
	margin: 0 0 30px 0;
	@media (min-width: 992px){
		grid-column: 2 / 3;
		margin: 0;
	}
}
.sidebar__menu {}
.sidebar__list {
	& li{
		margin: 0 0 15px 0;
	}
}
.sidebar__link {
	color: #fff;
	font-size: 20px;
}
.content {
	@media (min-width: 992px){
		grid-column: 3 / 4;
		padding: 0 0 0 30px;
	}
}
.content__title {}
.content__gallery {
	margin: 0 0 30px 0;
}
.gallery {}
.gallery__title {}
.gallery__items {
	display: grid;
	// отступ между изображениями
	gap: 10px;
	// строим автоматическую сетку, выстравиваться в ряд столько сколько помещаются и переходить на новую строку когда нужно
	grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}
.gallery__item {
	position: relative;
	padding: 0 0 85% 0; // этот padding показывает картинки, то есть задает
	& img {
		// делаем адаптивные изображения
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
}
.gallery__item_big {
	@media (min-width: 767px){ // чтобы было ровные при меньшем экране
		// сколько ячеек под себя забирает этот объект
		grid-column: span 2;
		grid-row: span 2;
	}
}
// ---------------------------------------------------------------------------------------------------------------------
.content__products {}
.products {}
.products__title {}
.products__items {
	display: grid;
	column-gap: 30px;
	row-gap: 50px;
	grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
	// grid-auto-rows: 1fr; // строки будут заполнять все пространство и подстраиваться друг под друга (flex такое не может)
}
.products__item {
	// grid элемент автоматом становится блочным
	display: grid;
	// выстроит все объекты по вертикали (картинка, текст, кнопка)
	grid-auto-flow: row;
	// обозначаем сетку
	// изображение автоматическое по вертикали, потом название заполняет все доступное пространство, кнопка мин 40px / на всю ширину
	grid-template: auto 1fr minmax(40px, auto) / 1fr;
}
.products__image {
	// но выдно не будет все равно, так как это строчный объект, и для этого выше код item
	position: relative;
	padding: 0 0 90% 0;
	margin: 0 0 20px 0;
	& img{
		// делаем адаптивные изображения
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
}
.products__name {
	font-size: 24px;
	color: #fff;
	line-height: 30px;
	margin: 0 0 20px 0;
}
.products__button {
	color: #fff;
	text-transform: uppercase;
	letter-spacing: 2px;
	text-decoration: none;
	background-color: #77608d;
	padding: 0 20px;
	// выровним по центру
	line-height: 40px;
	// чтобы элемент не растягивался на всю шириню делаем
	justify-self: start;
}
.footer {
	background-color: #77608d;
	display: grid;
	grid-area: footer;
	padding: 15px;
	align-items: center;
	grid-template: 1fr / 1fr minmax(auto, 300px) minmax(auto, 1100px) 1fr;;
	@media (max-width: 550px) {
		// 2 ряда и одна колонка
		grid-template: 1fr 1fr / 1fr;
		text-align: center;
	}
}
.footer__copy {
	// для больших ширин
	@media (min-width: 550px) {
		grid-column: 2 / 3;
	}
	// для меньших
	@media (max-width: 550px) {
		order: 2;
	}
}
.footer__text {

	@media (min-width: 550px) {
		text-align: right;
		grid-column: 3 / 4;
	}
	// для меньших
	@media (max-width: 550px) {
		order: 1;
	}
}
